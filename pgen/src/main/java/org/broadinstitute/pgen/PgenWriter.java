/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.broadinstitute.pgen;

import htsjdk.io.HtsPath;
import htsjdk.samtools.util.RuntimeIOException;
import htsjdk.variant.variantcontext.Allele;
import htsjdk.variant.variantcontext.Genotype;
import htsjdk.variant.variantcontext.VariantContext;
import htsjdk.variant.variantcontext.writer.Options;
import htsjdk.variant.variantcontext.writer.VariantContextWriter;
import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;
import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder.OutputType;
import htsjdk.variant.vcf.VCFHeader;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PgenWriter implements VariantContextWriter {

    public static final int PLINK2_NO_CALL_VALUE = -9;
    public static final int PLINK2_MAX_ALTERNATE_ALLELES = 255;

    public static String pGenExtension = ".pgen";
    public static String pGenIndexExtension = ".pgen.pgi";    
    public static String pVarExtension = ".pvar";
    public static String pSamExtension = ".psam";
 
    // native JNI methods
    private static native long openPgen(String file, int pgenWriteModeInt, long numberOfVariants, int numberOfSamples);
    private native void closePgen(long pgenContextHandle);
    private native void appendAlleles(long pgenContextHandle, ByteBuffer alleles);
    private static native ByteBuffer createBuffer(int length);
    private static native void destroyByteBuffer(ByteBuffer buffer);

    // enum for the plink2 pgen write modes
    public enum PgenWriteMode {
        PGEN_FILE_MODE_BACKWARD_SEEK(0),
        PGEN_FILE_MODE_WRITE_SEPARATE_INDEX(1),
        PGEN_FILE_MODE_WRITE_AND_COPY(2); 

        private final int mode;
        private PgenWriteMode(final int mode) { this.mode = mode; }
        public int value() { return this.mode; }
    };

    private long pgenContextHandle;
    private ByteBuffer alleleBuffer;
    private VariantContextWriter pVarWriter;
    private final HtsPath pVarFile;
    private final HtsPath pSamFile;
    private final int maxAltAlleles;

    // private long multiallelic_ct = 0;
    // private long nonSNP_ct = 0;
    // private long mnp_ct = 0;

    static {
        System.loadLibrary("pgen");
    }

    // doesn't preserve phasing
    public PgenWriter(
        final HtsPath pgenFile,
        final VCFHeader vcfHeader,
        final PgenWriteMode pgenWriteMode,
        final long numberOfVariants,
        final int maxAltAlleles) {

        if (!pgenFile.hasExtension(pGenExtension)) {
            throw new PgenJniException(
                String.format("Invalid pgen file name: %s. pgen files must use the .pgen extension", pgenFile.getRawInputString()));
        }
        if (!pgenFile.getScheme().equals("file")) {
            throw new PgenJniException(String.format("Invalid pgen file name: %s. pgen files must be local files", pgenFile));
        }
        if (maxAltAlleles > PLINK2_MAX_ALTERNATE_ALLELES) {
            throw new PgenJniException(
                String.format("Requested max alternate alleles of (%d) exceeds the supported pgen max of %d",
                    maxAltAlleles,
                    PLINK2_MAX_ALTERNATE_ALLELES));
        }
        this.maxAltAlleles = maxAltAlleles;

        pgenContextHandle = openPgen(pgenFile.getRawInputString(), pgenWriteMode.value(), numberOfVariants, vcfHeader.getNGenotypeSamples());
        alleleBuffer = createBuffer(vcfHeader.getNGenotypeSamples()*2*4); //samples * ploidy * bytes in int32
        alleleBuffer.order(ByteOrder.LITTLE_ENDIAN);

        // create the .pvar
        final String pgenFilePrefix = getAbsoluteFileNameWithoutExtension(pgenFile.toPath(), pGenExtension);
        pVarFile = new HtsPath(pgenFile.toPath()
            .resolveSibling(pgenFilePrefix + PgenWriter.pVarExtension)
            .toAbsolutePath().toString());
        pVarWriter = new VariantContextWriterBuilder()
            .clearOptions()
            .setOptions(EnumSet.of(Options.DO_NOT_WRITE_GENOTYPES, Options.ALLOW_MISSING_FIELDS_IN_HEADER))
            .setOutputPath(pVarFile.toPath())
            .setOutputFileType(OutputType.VCF) // plink2 expects the .pvar to have a .pvar extension
            .build();
        pVarWriter.writeHeader(vcfHeader);

        // create, write, and close the .psam up front, so we don't have to retain the header until the end
        pSamFile = new HtsPath(pgenFile.toPath()
            .resolveSibling(pgenFilePrefix + PgenWriter.pSamExtension)
            .toAbsolutePath().toString());
        try (final BufferedWriter psamWriter = Files.newBufferedWriter(pSamFile.toPath())) {
            final String pSamHeader = "#IID\tSEX\n";
            psamWriter.append(pSamHeader);
            // Sample name order matters here. I don't see any spec for the psam or pvar, but if you use plink2 to crecrate a VCF
            // from a pgen file set, it appears uses the order of the samples in the .psam as the basis for ordering the genotypes
            // in the VCF. So if we don't preserve the order in the .psam, the genotypes in the roundtripped VCF won't match the
            // original VCF (and will be incorrect).
            for (final String sampleName : vcfHeader.getGenotypeSamples()) {
                final StringBuilder s = new StringBuilder(20);
                s.append(sampleName);
                s.append("\tN/A\n");
                psamWriter.write(s.toString());
            }
        } catch (final IOException e) {
            throw new RuntimeIOException(e);
        }
    }

    @Override
    public void writeHeader(final VCFHeader header) {
       throw new UnsupportedOperationException("PGEN writer does not support independent header write.");
    }

    @Override
    public void setHeader(final VCFHeader header) {
        throw new UnsupportedOperationException("PGEN writer does not support independent setHeader");
   }

   @Override
    public void close() {
        //System.out.println(String.format("Multiallelic: %d NonSNP: %d MNP: %d", multiallelic_ct, nonSNP_ct, mnp_ct));
   
        pVarWriter.close();
        pVarWriter = null;

        closePgen(pgenContextHandle);
        pgenContextHandle = 0;

        destroyByteBuffer(alleleBuffer);
        alleleBuffer = null;
    }

    @Override
    public boolean checkError() {
        return false;
    }

    private static Map<Allele, Integer> buildAlleleMap(final VariantContext vc) {
        final Map<Allele, Integer> alleleMap = new HashMap<>(vc.getAlleles().size() + 1);
        alleleMap.put(Allele.NO_CALL, PLINK2_NO_CALL_VALUE); // convenience for lookup
        final List<Allele> alleles = vc.getAlleles();
        for (int i = 0; i < alleles.size(); i++) {
            alleleMap.put(alleles.get(i), i);
        }

        return alleleMap;
    }

    @Override
    public void add(final VariantContext vc) {
        // if (!vc.isBiallelic()) {
        //     multiallelic_ct++;
        // }
        // if (!vc.isSNP()) {
        //     nonSNP_ct++;
        // }
        // if (vc.isMNP()) {
        //     mnp_ct++;
        // }

        //reset buffer
        alleleBuffer.clear();
        final Map<Allele, Integer> alleleMap = buildAlleleMap(vc);

        for (final Genotype g : vc.getGenotypes()) {
            if (g.getPloidy() != 2) {
                throw new PgenJniException(
                    "PGEN only supports diploid samples and we see one with ploidy = " + g.getPloidy()
                        + " at line " + vc.toStringDecodeGenotypes());
            }
            for (final Allele allele : g.getAlleles()) {
                final Integer mapping = alleleMap.get(allele);
                try {
                    alleleBuffer.putInt(mapping);
                } catch (BufferOverflowException e){
                    throw new RuntimeException("Buffer overflow for: " + mapping +" for  Allele: " + allele.toString() + " from Genotype: " + g.toString() + " at buffer position: "+ alleleBuffer.position());
                }
            }
        }
        if (alleleBuffer.position() != alleleBuffer.limit()) {
            throw new IllegalStateException("Allele buffer is not completely filled, we have a problem. " +
                    "Position: " + alleleBuffer.position() + " Expected " + alleleBuffer.limit());
        }
        alleleBuffer.rewind();
        appendAlleles(pgenContextHandle, alleleBuffer);

        // add the VC to pvar
        pVarWriter.add(vc);
    }

    // given a Path, return the absolute path of the file, without the trailing extension
    public static String getAbsoluteFileNameWithoutExtension(final Path targetPath, final String extension) {
        final String targetAbsolutePath = targetPath.toAbsolutePath().toString();
        return targetAbsolutePath.substring(0, targetAbsolutePath.lastIndexOf(extension));
    }
    
}
